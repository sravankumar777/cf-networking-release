// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-dns-adapter/copilot/api"
	"sync"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type VIPResolverCopilotClient struct {
	GetVIPByNameStub        func(ctx context.Context, in *api.GetVIPByNameRequest, opts ...grpc.CallOption) (*api.GetVIPByNameResponse, error)
	getVIPByNameMutex       sync.RWMutex
	getVIPByNameArgsForCall []struct {
		ctx  context.Context
		in   *api.GetVIPByNameRequest
		opts []grpc.CallOption
	}
	getVIPByNameReturns struct {
		result1 *api.GetVIPByNameResponse
		result2 error
	}
	getVIPByNameReturnsOnCall map[int]struct {
		result1 *api.GetVIPByNameResponse
		result2 error
	}
	HealthStub        func(ctx context.Context, in *api.HealthRequest, opts ...grpc.CallOption) (*api.HealthResponse, error)
	healthMutex       sync.RWMutex
	healthArgsForCall []struct {
		ctx  context.Context
		in   *api.HealthRequest
		opts []grpc.CallOption
	}
	healthReturns struct {
		result1 *api.HealthResponse
		result2 error
	}
	healthReturnsOnCall map[int]struct {
		result1 *api.HealthResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *VIPResolverCopilotClient) GetVIPByName(ctx context.Context, in *api.GetVIPByNameRequest, opts ...grpc.CallOption) (*api.GetVIPByNameResponse, error) {
	fake.getVIPByNameMutex.Lock()
	ret, specificReturn := fake.getVIPByNameReturnsOnCall[len(fake.getVIPByNameArgsForCall)]
	fake.getVIPByNameArgsForCall = append(fake.getVIPByNameArgsForCall, struct {
		ctx  context.Context
		in   *api.GetVIPByNameRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetVIPByName", []interface{}{ctx, in, opts})
	fake.getVIPByNameMutex.Unlock()
	if fake.GetVIPByNameStub != nil {
		return fake.GetVIPByNameStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getVIPByNameReturns.result1, fake.getVIPByNameReturns.result2
}

func (fake *VIPResolverCopilotClient) GetVIPByNameCallCount() int {
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	return len(fake.getVIPByNameArgsForCall)
}

func (fake *VIPResolverCopilotClient) GetVIPByNameArgsForCall(i int) (context.Context, *api.GetVIPByNameRequest, []grpc.CallOption) {
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	return fake.getVIPByNameArgsForCall[i].ctx, fake.getVIPByNameArgsForCall[i].in, fake.getVIPByNameArgsForCall[i].opts
}

func (fake *VIPResolverCopilotClient) GetVIPByNameReturns(result1 *api.GetVIPByNameResponse, result2 error) {
	fake.GetVIPByNameStub = nil
	fake.getVIPByNameReturns = struct {
		result1 *api.GetVIPByNameResponse
		result2 error
	}{result1, result2}
}

func (fake *VIPResolverCopilotClient) GetVIPByNameReturnsOnCall(i int, result1 *api.GetVIPByNameResponse, result2 error) {
	fake.GetVIPByNameStub = nil
	if fake.getVIPByNameReturnsOnCall == nil {
		fake.getVIPByNameReturnsOnCall = make(map[int]struct {
			result1 *api.GetVIPByNameResponse
			result2 error
		})
	}
	fake.getVIPByNameReturnsOnCall[i] = struct {
		result1 *api.GetVIPByNameResponse
		result2 error
	}{result1, result2}
}

func (fake *VIPResolverCopilotClient) Health(ctx context.Context, in *api.HealthRequest, opts ...grpc.CallOption) (*api.HealthResponse, error) {
	fake.healthMutex.Lock()
	ret, specificReturn := fake.healthReturnsOnCall[len(fake.healthArgsForCall)]
	fake.healthArgsForCall = append(fake.healthArgsForCall, struct {
		ctx  context.Context
		in   *api.HealthRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("Health", []interface{}{ctx, in, opts})
	fake.healthMutex.Unlock()
	if fake.HealthStub != nil {
		return fake.HealthStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.healthReturns.result1, fake.healthReturns.result2
}

func (fake *VIPResolverCopilotClient) HealthCallCount() int {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return len(fake.healthArgsForCall)
}

func (fake *VIPResolverCopilotClient) HealthArgsForCall(i int) (context.Context, *api.HealthRequest, []grpc.CallOption) {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return fake.healthArgsForCall[i].ctx, fake.healthArgsForCall[i].in, fake.healthArgsForCall[i].opts
}

func (fake *VIPResolverCopilotClient) HealthReturns(result1 *api.HealthResponse, result2 error) {
	fake.HealthStub = nil
	fake.healthReturns = struct {
		result1 *api.HealthResponse
		result2 error
	}{result1, result2}
}

func (fake *VIPResolverCopilotClient) HealthReturnsOnCall(i int, result1 *api.HealthResponse, result2 error) {
	fake.HealthStub = nil
	if fake.healthReturnsOnCall == nil {
		fake.healthReturnsOnCall = make(map[int]struct {
			result1 *api.HealthResponse
			result2 error
		})
	}
	fake.healthReturnsOnCall[i] = struct {
		result1 *api.HealthResponse
		result2 error
	}{result1, result2}
}

func (fake *VIPResolverCopilotClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVIPByNameMutex.RLock()
	defer fake.getVIPByNameMutex.RUnlock()
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return fake.invocations
}

func (fake *VIPResolverCopilotClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.VIPResolverCopilotClient = new(VIPResolverCopilotClient)
