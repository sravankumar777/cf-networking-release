// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type SDCClient struct {
	IPsStub        func(hostname string) ([]string, error)
	iPsMutex       sync.RWMutex
	iPsArgsForCall []struct {
		hostname string
	}
	iPsReturns struct {
		result1 []string
		result2 error
	}
	iPsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SDCClient) IPs(hostname string) ([]string, error) {
	fake.iPsMutex.Lock()
	ret, specificReturn := fake.iPsReturnsOnCall[len(fake.iPsArgsForCall)]
	fake.iPsArgsForCall = append(fake.iPsArgsForCall, struct {
		hostname string
	}{hostname})
	fake.recordInvocation("IPs", []interface{}{hostname})
	fake.iPsMutex.Unlock()
	if fake.IPsStub != nil {
		return fake.IPsStub(hostname)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.iPsReturns.result1, fake.iPsReturns.result2
}

func (fake *SDCClient) IPsCallCount() int {
	fake.iPsMutex.RLock()
	defer fake.iPsMutex.RUnlock()
	return len(fake.iPsArgsForCall)
}

func (fake *SDCClient) IPsArgsForCall(i int) string {
	fake.iPsMutex.RLock()
	defer fake.iPsMutex.RUnlock()
	return fake.iPsArgsForCall[i].hostname
}

func (fake *SDCClient) IPsReturns(result1 []string, result2 error) {
	fake.IPsStub = nil
	fake.iPsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *SDCClient) IPsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.IPsStub = nil
	if fake.iPsReturnsOnCall == nil {
		fake.iPsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.iPsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *SDCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iPsMutex.RLock()
	defer fake.iPsMutex.RUnlock()
	return fake.invocations
}

func (fake *SDCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
